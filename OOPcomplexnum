#include<iostream>
using namespace std;

class complex {
private:
    int real, imag;

public:
    complex() {
        real = 0;
        imag = 0;
    }

    complex(int r, int i) {
        real = r;
        imag = i;
    }

    complex operator+(const complex &c) {
        complex temp;
        temp.real = real + c.real;
        temp.imag = imag + c.imag;
        return temp;
    }

    complex operator*(const complex &c) {
        complex temp;
        temp.real = (real * c.real) - (imag * c.imag);
        temp.imag = (real * c.imag) + (imag * c.real);
        return temp;
    }

    friend ostream &operator<<(ostream &out, const complex &c) {
        out << c.real << "+" << c.imag << "i";
        return out;
    }

    friend istream &operator>>(istream &in, complex &c) {
        cout << "Enter real part: ";
        in >> c.real;
        cout << "Enter imaginary part: ";
        in >> c.imag;
        return in;
    }
};

int main() {
    complex c1, c2, c3, c4;

    cout << "Enter first complex number:\n";
    cin >> c1;
    cout << "Enter second complex number:\n";
    cin >> c2;

    c3 = c1 + c2;
    cout << "Sum: " << c3 << endl;

    c4 = c1 * c2;
    cout << "Product: " << c4 << endl;

    return 0;
}
